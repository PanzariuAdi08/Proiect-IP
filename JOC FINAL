#include <iostream>
#include <stack>
#include <winbgim.h>
#include <graphics.h>
#include <time.h>
#include <windows.h>
#include <MMSystem.h>
using namespace std;
#define MARE 0.09
#define MIJLOCIE 0.07
#define MIC 0.05
#define SELECTAT 1
#define NESELECTAT 0
#define MARGINE 1
#define TABLA 2
#define INVALID 3
#define MULTIPLAYER 1
#define CALCULATOR_STRATEGIE 2
#define CALCULATOR_ALEATORIU 3
#define RELAXAT 0
#define APASAT 1
#define CONTINUA 1
#define OPRESTE 0
#define ON 1
#define OFF 0
bool endGame = false;
int x, y, marimePiesa, randJucator, option ,music=ON,J1=BLUE,J2=RED;
int latime,inaltime;
char v[6];
time_t start,stop;

typedef struct limite
{
    int x1,x2,y1,y2;
} LIMITE;
LIMITE tabla1[4][4];
typedef struct jucator
{
    int stare[7],pozitie[7],selectat=-1;
    char punctaj;
    LIMITE lpiese[7];
} JUCATOR;
JUCATOR j1,j2;
struct Punct {
	int x, y;
};

Punct a11, a12, a13, a21, a22, a23, a31, a32, a33;
struct evidentaPiese {
	int x, y;
	bool disponibil = 1;
	bool peTabla = 0;
}managerPiese[7] , managerPiesePlayer[7];
void buton(int x, int y,char *text, int stare)
{
    if(stare==RELAXAT)
    {
        setcolor(BLUE);
        setlinestyle(SOLID_LINE,1,THICK_WIDTH);
        rectangle(x-latime/4,y-inaltime/20,x+latime/4,y+inaltime/20);
        setfillstyle(SOLID_FILL,BLUE);
        floodfill(x,y,BLUE);
        setcolor(WHITE);
        settextjustify(CENTER_TEXT,CENTER_TEXT);
        settextstyle(SANS_SERIF_FONT,HORIZ_DIR,6);
        setbkcolor(BLUE);
        outtextxy(x,y+inaltime/30,text);
        setlinestyle(SOLID_LINE,1,NORM_WIDTH);
    }
    else
    {
        setcolor(WHITE);
        setlinestyle(SOLID_LINE,1,THICK_WIDTH);
        rectangle(x-latime/4,y-inaltime/20,x+latime/4,y+inaltime/20);
        setfillstyle(SOLID_FILL,BLUE);
        floodfill(x,y,WHITE);
        setcolor(WHITE);
        settextjustify(CENTER_TEXT,CENTER_TEXT);
        settextstyle(SANS_SERIF_FONT,HORIZ_DIR,6);
        setbkcolor(BLUE);
        outtextxy(x,y+inaltime/30,text);
        setlinestyle(SOLID_LINE,1,NORM_WIDTH);
    }
}
void timer()
{
    time(&stop);
    if(difftime(stop,start)>=1)
    {
    start=stop;
    v[4]++;
    if(v[4]==':')
    {
        v[4]='0';
        v[3]++;
        if(v[3]=='6')
        {
            v[3]='0';
            v[1]++;
            if(v[1]==':')
            {
                v[0]++;
                v[1]='0';
            }
        }
    }
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.3,inaltime*0.07,v);
    }
}
int piesa(int x, int y, float marime,int juc, int stare)
{
    if(stare==NESELECTAT)
    {
        setcolor(juc);
        setlinestyle(SOLID_LINE,1,THICK_WIDTH);
        circle(x,y,inaltime*marime);
        setfillstyle(SOLID_FILL,juc);
        fillellipse(x,y,getmaxy()*marime,getmaxy()*marime);
        setlinestyle(SOLID_LINE,1,NORM_WIDTH);

    }
    else if(stare=SELECTAT)
    {
        setcolor(YELLOW);
        setlinestyle(SOLID_LINE,1,THICK_WIDTH);
        circle(x,y,getmaxy()*marime);
        setfillstyle(SOLID_FILL,juc);
        fillellipse(x,y,getmaxy()*marime,getmaxy()*marime);
        setlinestyle(SOLID_LINE,1,NORM_WIDTH);
    }
}
void rama()
{
    setcolor(WHITE);
    line(0.2*latime,0,0.2*latime,inaltime);
    line(0.8*latime,0,0.8*latime,inaltime);
    line(0,0.15*inaltime,latime,0.15*inaltime);
}
void liniiajutatoare()
{
    setcolor(WHITE);
    line(0,0.36*inaltime,0.2*latime,0.36*inaltime);
    line(0,0.57*inaltime,0.2*latime,0.57*inaltime);
    line(0,0.79*inaltime,0.2*latime,0.79*inaltime);
    line(0.8*latime,0.36*inaltime,latime,0.36*inaltime);
    line(0.8*latime,0.57*inaltime,latime,0.57*inaltime);
    line(0.8*latime,0.79*inaltime,latime,0.79*inaltime);
}
void tablajoc()
{
    setcolor(WHITE);
    line(latime*0.254,inaltime*0.43,latime*0.254+inaltime*0.85,inaltime*0.43);
    line(latime*0.254,inaltime*0.71,latime*0.254+inaltime*0.85,inaltime*0.71);
    line(latime*0.254,inaltime*0.15,latime*0.254,inaltime);
    line(latime*0.254+inaltime*0.28,inaltime*0.15,latime*0.254+inaltime*0.28,inaltime);
    line(latime*0.254+2*inaltime*0.28,inaltime*0.15,latime*0.254+2*inaltime*0.28,inaltime);
    line(latime*0.254+3*inaltime*0.28+8,inaltime*0.15,latime*0.254+3*inaltime*0.28+8,inaltime);

}
void textjucatori()
{
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.1,inaltime*0.07,"JUCATOR1");
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.9,inaltime*0.07,"JUCATOR2");
    if(endGame==FALSE)
        if(randJucator==1)
        {
            setcolor(WHITE);
            settextjustify(CENTER_TEXT,CENTER_TEXT);
            settextstyle(SANS_SERIF_FONT,HORIZ_DIR,3);
            outtextxy(latime*0.5,inaltime*0.07,"RAND JUCATOR: 1");
        }
        else
        {
            setcolor(WHITE);
            settextjustify(CENTER_TEXT,CENTER_TEXT);
            settextstyle(SANS_SERIF_FONT,HORIZ_DIR,3);
            outtextxy(latime*0.5,inaltime*0.07,"RAND JUCATOR: 2");
        }


}
void textalegetipiesa()
{
        setcolor(WHITE);
        settextjustify(CENTER_TEXT,CENTER_TEXT);
        settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
        outtextxy(latime*0.5,inaltime*0.10,"                ALEGETI O PIESA                ");
}
void textmutare()
{
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.5,inaltime*0.1,"UNDE DORITI SA MUTATI PIESA?");
}
void textmutareinvalida()
{
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.5,inaltime*0.1,"               MUTARE INVALIDA                ");
}

void initlimite()
{
    tabla1[1][1].x1=latime*0.254;
    tabla1[1][1].x2=latime*0.254+inaltime*0.28;
    tabla1[1][1].y1=inaltime*0.15;
    tabla1[1][1].y2=inaltime*0.43;
    tabla1[1][2].x1=latime*0.254+inaltime*0.28;
    tabla1[1][2].x2=latime*0.254+2*inaltime*0.28;
    tabla1[1][2].y1=inaltime*0.15;
    tabla1[1][2].y2=inaltime*0.43;
    tabla1[1][3].x1=latime*0.254+2*inaltime*0.28;
    tabla1[1][3].x2=latime*0.254+3*inaltime*0.28+inaltime*0.01;
    tabla1[1][3].y1=inaltime*0.15;
    tabla1[1][3].y2=inaltime*0.43;
    tabla1[2][1].x1=latime*0.254;
    tabla1[2][1].x2=latime*0.254+inaltime*0.28;
    tabla1[2][1].y1=inaltime*0.43;
    tabla1[2][1].y2=inaltime*0.71;
    tabla1[2][2].x1=latime*0.254+inaltime*0.28;
    tabla1[2][2].x2=latime*0.254+2*inaltime*0.28;
    tabla1[2][2].y1=inaltime*0.43;
    tabla1[2][2].y2=inaltime*0.71;
    tabla1[2][3].x1=latime*0.254+2*inaltime*0.28;
    tabla1[2][3].x2=latime*0.254+3*inaltime*0.28+inaltime*0.01;
    tabla1[2][3].y1=inaltime*0.43;
    tabla1[2][3].y2=inaltime*0.71;
    tabla1[3][1].x1=latime*0.254;
    tabla1[3][1].x2=latime*0.254+inaltime*0.28;
    tabla1[3][1].y1=inaltime*0.71;
    tabla1[3][1].y2=inaltime;
    tabla1[3][2].x1=latime*0.254+inaltime*0.28;
    tabla1[3][2].x2=latime*0.254+2*inaltime*0.28;
    tabla1[3][2].y1=inaltime*0.71;
    tabla1[3][2].y2=inaltime;
    tabla1[3][3].x1=latime*0.254+2*inaltime*0.28;
    tabla1[3][3].x2=latime*0.254+3*inaltime*0.28+inaltime*0.01;
    tabla1[3][3].y2=latime*0.254+2*inaltime*0.28;
    tabla1[3][3].y1=inaltime*0.71;
    //
    j1.lpiese[0].x1=0;
    j1.lpiese[0].x2=latime*0.2;
    j1.lpiese[0].y1=inaltime*0.15;
    j1.lpiese[0].y2=inaltime*0.36;
    j1.lpiese[1].x1=0;
    j1.lpiese[1].x2=latime*0.2;
    j1.lpiese[1].y1=inaltime*0.36;
    j1.lpiese[1].y2=inaltime*0.57;
    j1.lpiese[2].x1=0;
    j1.lpiese[2].x2=latime*0.1;
    j1.lpiese[2].y1=inaltime*0.57;
    j1.lpiese[2].y2=inaltime*0.78;
    j1.lpiese[3].x1=latime*0.1;
    j1.lpiese[3].x2=latime*0.2;
    j1.lpiese[3].y1=inaltime*0.57;
    j1.lpiese[3].y2=inaltime*0.78;
    j1.lpiese[4].x1=0;
    j1.lpiese[4].x2=latime*0.1;
    j1.lpiese[4].y1=inaltime*0.78;
    j1.lpiese[4].y2=inaltime;
    j1.lpiese[5].x1=latime*0.1;
    j1.lpiese[5].x2=latime*0.2;
    j1.lpiese[5].y1=inaltime*0.78;
    j1.lpiese[5].y2=inaltime;
    //
    j2.lpiese[0].x1=latime*0.8;
    j2.lpiese[0].x2=latime;
    j2.lpiese[0].y1=inaltime*0.15;
    j2.lpiese[0].y2=inaltime*0.36;
    j2.lpiese[1].x1=latime*0.8;
    j2.lpiese[1].x2=latime;
    j2.lpiese[1].y1=inaltime*0.36;
    j2.lpiese[1].y2=inaltime*0.57;
    j2.lpiese[2].x1=latime*0.8;
    j2.lpiese[2].x2=latime*0.9;
    j2.lpiese[2].y1=inaltime*0.57;
    j2.lpiese[2].y2=inaltime*0.78;
    j2.lpiese[3].x1=latime*0.9;
    j2.lpiese[3].x2=latime;
    j2.lpiese[3].y1=inaltime*0.57;
    j2.lpiese[3].y2=inaltime*0.78;
    j2.lpiese[4].x1=latime*0.8;
    j2.lpiese[4].x2=latime*0.9;
    j2.lpiese[4].y1=inaltime*0.78;
    j2.lpiese[4].y2=inaltime;
    j2.lpiese[5].x1=latime*0.9;
    j2.lpiese[5].x2=latime;
    j2.lpiese[5].y1=inaltime*0.78;
    j2.lpiese[5].y2=inaltime;
}
int cautare()
{
    int x,y,ok=1,i;
    do
    {
        timer();
        if(ismouseclick(WM_LBUTTONDOWN))
        {
            x=mousex();
            y=mousey();
            clearmouseclick(WM_LBUTTONDOWN);
            if(randJucator==1)
            {
                if(x>j1.lpiese[j1.selectat].x1 && x<j1.lpiese[j1.selectat].x2 && y>j1.lpiese[j1.selectat].y1 && y<j1.lpiese[j1.selectat].y2)
                    return -1;
            }
            else
                if(x>j2.lpiese[j2.selectat].x1 && x<j2.lpiese[j2.selectat].x2 && y>j2.lpiese[j2.selectat].y1 && y<j2.lpiese[j2.selectat].y2)
                    return -1;
            if(y>tabla1[1][1].y1 && y<tabla1[1][1].y2)
            {
                if(x>tabla1[1][1].x1 && x<tabla1[1][1].x2)
                    return 11;
                if(x>tabla1[1][2].x1 && x<tabla1[1][2].x2)
                    return 12;
                if(x>tabla1[1][3].x1 && x<tabla1[1][3].x2)
                    return 13;
            }
            if(y>tabla1[2][1].y1 && y<tabla1[2][1].y2)
            {
                if(x>tabla1[2][1].x1 && x<tabla1[2][1].x2)
                    return 21;
                if(x>tabla1[2][2].x1 && x<tabla1[2][2].x2)
                    return 22;
                if(x>tabla1[2][3].x1 && x<tabla1[2][3].x2)
                    return 23;
            }
            if(y>tabla1[3][1].y1 && y<tabla1[3][1].y2)
            {
                if(x>tabla1[3][1].x1 && x<tabla1[3][1].x2)
                    return 31;
                if(x>tabla1[3][2].x1 && x<tabla1[3][2].x2)
                    return 32;
                if(x>tabla1[3][3].x1 && x<tabla1[3][3].x2)
                    return 33;
            }
            return 0;
        }
    }
    while(ok);
}

void creeazapiese()
{
    int i;
    float marime;
    for(i=5; i>=0; i--)
    {
        if(i<2)
            marime=MARE;
        else if(i<4)
            marime=MIJLOCIE;
        else
            marime=MIC;
        piesa(j1.lpiese[i].x1+(j1.lpiese[i].x2-j1.lpiese[i].x1)/2,j1.lpiese[i].y1+(j1.lpiese[i].y2-j1.lpiese[i].y1)/2,marime,J1,j1.stare[i]);
        piesa(j2.lpiese[i].x1+(j2.lpiese[i].x2-j2.lpiese[i].x1)/2,j2.lpiese[i].y1+(j2.lpiese[i].y2-j2.lpiese[i].y1)/2,marime,J2,j2.stare[i]);
    }

}
void selecteaza(int i)
{
    if(randJucator==1)
    {
        if(j1.selectat==-1)
        {
            j1.selectat=i;
            j1.stare[j1.selectat]=SELECTAT;
        }
        else if(j1.selectat==i)
        {
            j1.selectat=-1;
            j1.stare[i]=NESELECTAT;
        }
    }
    else
    {
        if(j2.selectat==-1)
        {
            j2.selectat=i;
            j2.stare[j2.selectat]=SELECTAT;
        }
        else if(j2.selectat==i)
        {
            j2.selectat=-1;
            j2.stare[i]=NESELECTAT;
        }
    }
    creeazapiese();
}
void textscor()
{
    char text[5];
    text[0]=j1.punctaj;
    text[1]='-';
    text[2]=j2.punctaj;
    text[3]='\0';
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,1);
    outtextxy(latime*0.5,inaltime*0.14,text);
}
void creeazatabla()
{
    cleardevice();
    rama();
    tablajoc();
    liniiajutatoare();
    textjucatori();
    textscor();
    timer();
    creeazapiese();
}
int selecteazaoptiune()
{
    int x,y,i,j,r,ok=0;
    do
    {
        timer();
        if(ismouseclick(WM_LBUTTONDOWN))
        {
            x=mousex();
            y=mousey();
            clearmouseclick(WM_LBUTTONDOWN);
            if(randJucator==1)
            {
                if(x<latime*0.2 && y>inaltime*0.15)
                {
                    ok=1;
                    option=MARGINE;
                    for(i=0; i<=5; i++)
                        if(x>j1.lpiese[i].x1 && x<j1.lpiese[i].x2 && y>j1.lpiese[i].y1 && y<j1.lpiese[i].y2)
                            if(i<=1)
                                if(j1.pozitie[i]==0)
                                {
                                    marimePiesa=3;
                                    selecteaza(i);
                                    return 0;
                                }
                                else
                                    {
                                    option=INVALID;
                                    return 0;
                                    }
                            else if(i<=3)
                                if(j1.pozitie[i]==0)
                                {
                                    marimePiesa=2;
                                    selecteaza(i);
                                    return 0;
                                }
                                else
                                    {
                                    option=INVALID;
                                    return 0;
                                    }
                            else if(j1.pozitie[i]==0)
                            {
                                marimePiesa=1;
                                selecteaza(i);
                                return 0;
                            }
                            else
                                {
                                    option=INVALID;
                                    return 0;
                                }
                            option=INVALID;

                }
                else if(x>latime*0.254 && x<latime*0.254+inaltime*0.85 && y>inaltime*0.15)
                {
                    option=TABLA;
                    ok=1;
                    for(i=1;i<=3;i++)
                        for(j=1;j<=3;j++)
                            if(x>tabla1[i][j].x1 && x<tabla1[i][j].x2 && y>tabla1[i][j].y1 && y<tabla1[i][j].y2)
                            {
                                for(r=0;r<=5;r++)
                                    if(j1.pozitie[r]==i*10+j)
                                    {
                                        if(r<=1)
                                        {
                                        marimePiesa=MARE;
                                        selecteaza(r);
                                        }
                                        else
                                            if(r<=3)
                                            {
                                                marimePiesa=MIJLOCIE;
                                                selecteaza(r);
                                            }
                                            else
                                            {
                                                marimePiesa=MIC;
                                                selecteaza(r);
                                            }
                                        return i*10+j;
                                    }
                            }
                }
                else
                {
                    option=INVALID;
                    return 0;
                }
            }
            else
            {
                if(x>latime*0.8 && y>inaltime*0.15)
                {
                    ok=1;
                    option=MARGINE;
                    for(i=0; i<=5; i++)
                        if(x>j2.lpiese[i].x1 && x<j2.lpiese[i].x2 && y>j2.lpiese[i].y1 && y<j2.lpiese[i].y2)
                            if(i<=1)
                                if(j2.pozitie[i]==0)
                                {
                                    marimePiesa=3;
                                    selecteaza(i);
                                    return 0;
                                }
                                else
                                {
                                    option=INVALID;
                                    return 0;
                                }
                            else if(i<=3)
                                if(j2.pozitie[i]==0)
                                {
                                    marimePiesa=2;
                                    selecteaza(i);
                                    return 0;
                                }
                                else
                                {
                                    option=INVALID;
                                    return 0;
                                }
                            else if(j2.pozitie[i]==0)
                            {
                                marimePiesa=1;
                                selecteaza(i);
                                return 0;
                            }
                            else
                            {
                                option=INVALID;
                                return 0;
                            }
                        option=INVALID;

                }
                else if(x>latime*0.254 && x<latime*0.254+inaltime*0.85 && y>inaltime*0.15)
                {
                    option=TABLA;
                    ok=1;
                    for(i=1;i<=3;i++)
                        for(j=1;j<=3;j++)
                            if(x>tabla1[i][j].x1 && x<tabla1[i][j].x2 && y>tabla1[i][j].y1 && y<tabla1[i][j].y2)
                             for(r=0;r<=5;r++)
                                    if(j2.pozitie[r]==i*10+j)
                                    {
                                        if(r<=1)
                                        {
                                        marimePiesa=MARE;
                                        selecteaza(r);
                                        }
                                        else
                                            if(r<=3)
                                            {
                                                marimePiesa=MIJLOCIE;
                                                selecteaza(r);
                                            }
                                            else
                                            {
                                                marimePiesa=MIC;
                                                selecteaza(r);
                                            }
                                        return i*10+j;
                                    }
                }
                else
                {
                    option=INVALID;
                    return 0;
                }
            }
        }
    }
    while(ok==0);
        return 0;
}
void mutapiesamargine()
{
    float marime;
    if(randJucator==1)
    {
        if(j1.selectat<2)
            marime=MARE;
        else if(j1.selectat<4)
            marime=MIJLOCIE;
        else
            marime=MIC;
        piesa(j1.lpiese[j1.selectat].x1+(j1.lpiese[j1.selectat].x2-j1.lpiese[j1.selectat].x1)/2,j1.lpiese[j1.selectat].y1+(j1.lpiese[j1.selectat].y2-j1.lpiese[j1.selectat].y1)/2,marime,BLACK,NESELECTAT);
        j1.lpiese[j1.selectat].x1=tabla1[x][y].x1;
        j1.lpiese[j1.selectat].x2=tabla1[x][y].x2;
        j1.lpiese[j1.selectat].y1=tabla1[x][y].y1;
        j1.lpiese[j1.selectat].y2=tabla1[x][y].y2;
        j1.pozitie[j1.selectat]=x*10+y;
        selecteaza(j1.selectat);
    }
    else
    {
        if(j2.selectat<2)
            marime=MARE;
        else if(j2.selectat<4)
            marime=MIJLOCIE;
        else
            marime=MIC;
        piesa(j2.lpiese[j2.selectat].x1+(j2.lpiese[j2.selectat].x2-j2.lpiese[j2.selectat].x1)/2,j2.lpiese[j2.selectat].y1+(j2.lpiese[j2.selectat].y2-j2.lpiese[j2.selectat].y1)/2,marime,BLACK,NESELECTAT);
        j2.lpiese[j2.selectat].x1=tabla1[x][y].x1;
        j2.lpiese[j2.selectat].x2=tabla1[x][y].x2;
        j2.lpiese[j2.selectat].y1=tabla1[x][y].y1;
        j2.lpiese[j2.selectat].y2=tabla1[x][y].y2;
        j2.pozitie[j2.selectat]=x*10+y;
        selecteaza(j2.selectat);
    }
    creeazapiese();
}
struct Piesa
{
    int DimensiunePiesa;
    int Jucator;
} mutare;

struct TablaJoc
{
    stack<Piesa> Stiva;

} tablaJoc[4][4];

bool tablaPlina()
{
    for (int i = 1; i < 4; i++)
    {
        for (int j = 1; j < 4; j++)
        {
            if (tablaJoc[i][j].Stiva.empty())
                return 0;
        }
    }
    return 1;
}

int verificareSfarsitJoc()
{
    if (!tablaJoc[1][1].Stiva.empty() && !tablaJoc[2][2].Stiva.empty() && !tablaJoc[3][3].Stiva.empty() && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[2][2].Stiva.top().Jucator) && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[3][3].Stiva.top().Jucator))
        return tablaJoc[1][1].Stiva.top().Jucator;
    if (!tablaJoc[1][3].Stiva.empty() && !tablaJoc[2][2].Stiva.empty() && !tablaJoc[3][1].Stiva.empty() && (tablaJoc[1][3].Stiva.top().Jucator == tablaJoc[2][2].Stiva.top().Jucator) && (tablaJoc[1][3].Stiva.top().Jucator == tablaJoc[3][1].Stiva.top().Jucator))
        return tablaJoc[1][3].Stiva.top().Jucator;
    if (!tablaJoc[1][1].Stiva.empty() && !tablaJoc[1][2].Stiva.empty() && !tablaJoc[1][3].Stiva.empty() && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[1][2].Stiva.top().Jucator) && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[1][3].Stiva.top().Jucator))
        return tablaJoc[1][1].Stiva.top().Jucator;
    if (!tablaJoc[2][1].Stiva.empty() && !tablaJoc[2][2].Stiva.empty() && !tablaJoc[2][3].Stiva.empty() && (tablaJoc[2][1].Stiva.top().Jucator == tablaJoc[2][2].Stiva.top().Jucator) && (tablaJoc[2][1].Stiva.top().Jucator == tablaJoc[2][3].Stiva.top().Jucator))
        return tablaJoc[2][1].Stiva.top().Jucator;
    if (!tablaJoc[3][1].Stiva.empty() && !tablaJoc[3][2].Stiva.empty() && !tablaJoc[3][3].Stiva.empty() && (tablaJoc[3][1].Stiva.top().Jucator == tablaJoc[3][2].Stiva.top().Jucator) && (tablaJoc[3][1].Stiva.top().Jucator == tablaJoc[3][3].Stiva.top().Jucator))
        return tablaJoc[3][1].Stiva.top().Jucator;
    if (!tablaJoc[1][1].Stiva.empty() && !tablaJoc[2][1].Stiva.empty() && !tablaJoc[3][1].Stiva.empty() && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[2][1].Stiva.top().Jucator) && (tablaJoc[1][1].Stiva.top().Jucator == tablaJoc[3][1].Stiva.top().Jucator))
        return tablaJoc[1][1].Stiva.top().Jucator;
    if (!tablaJoc[1][2].Stiva.empty() && !tablaJoc[2][2].Stiva.empty() && !tablaJoc[3][2].Stiva.empty() && (tablaJoc[1][2].Stiva.top().Jucator == tablaJoc[2][2].Stiva.top().Jucator) && (tablaJoc[1][2].Stiva.top().Jucator == tablaJoc[3][2].Stiva.top().Jucator))
        return tablaJoc[1][2].Stiva.top().Jucator;
    if (!tablaJoc[1][3].Stiva.empty() && !tablaJoc[2][3].Stiva.empty() && !tablaJoc[3][3].Stiva.empty() && (tablaJoc[1][3].Stiva.top().Jucator == tablaJoc[2][3].Stiva.top().Jucator) && (tablaJoc[1][3].Stiva.top().Jucator == tablaJoc[3][3].Stiva.top().Jucator))
        return tablaJoc[1][3].Stiva.top().Jucator;
    return 0;
}
void inlocuire(int &i)
{

    cout<<"piesa mutata este"<<i<<endl;
    if(i==1)
        i=5;
    else
        if(i==2)
            i=4;
            else
                if(i==3)
                    i=3;
                else
                    if(i==4)
                        i=2;
                    else
                        if(i==5)
                            i=1;
                        else
                            if(i==6)
                                i=0;

}
int gasirePiesaPotrivita()
{

    if(tablaPlina())
    {
        for (int i = 6; i >= 1; i--)
        {
            if (managerPiese[i].disponibil)
                return i;
        }
    }
    else
    {
        for (int i = 6; i >= 1 ; i--)
	{
		if (!managerPiese[i].peTabla)
        {
            return i;
        }
	}
    }
	return 0;
}
void graficMutareCalculator(int m, int i, int j)
{
    float marime;
    if(j1.selectat<2)
            marime=MARE;
        else if(j1.selectat<4)
            marime=MIJLOCIE;
        else
            marime=MIC;
        piesa(j2.lpiese[m].x1+(j2.lpiese[m].x2-j2.lpiese[m].x1)/2,j2.lpiese[m].y1+(j2.lpiese[m].y2-j2.lpiese[m].y1)/2,marime,BLACK,NESELECTAT);

    j2.lpiese[m].x1=tabla1[i][j].x1;
    j2.lpiese[m].x2=tabla1[i][j].x2;
    j2.lpiese[m].y1=tabla1[i][j].y1;
    j2.lpiese[m].y2=tabla1[i][j].y2;
}
int defensiva(Punct a , Punct b , Punct c) //
{
	bool gasit = 0;
	int i;
	mutare.Jucator = 2;

	if (!tablaJoc[a.x][a.y].Stiva.empty() && !tablaJoc[b.x][b.y].Stiva.empty() && tablaJoc[a.x][a.y].Stiva.top().Jucator == 1 && tablaJoc[b.x][b.y].Stiva.top().Jucator == 1)
	{
		if (tablaJoc[c.x][c.y].Stiva.empty()) //In caz ca locul e gol ,computerul pune prima piesa disponibila
		{

			i = gasirePiesaPotrivita();

			managerPiese[i].x = c.x;
			managerPiese[i].y = c.y;
			managerPiese[i].peTabla = 1;
			if (i == 1 || i == 2) mutare.DimensiunePiesa = 1;
			else if (i == 3 || i == 4) mutare.DimensiunePiesa = 2;
			else if (i == 5 || i == 6) mutare.DimensiunePiesa = 3;

			tablaJoc[c.x][c.y].Stiva.push(mutare);
			inlocuire(i);
			graficMutareCalculator(i,c.x,c.y);
			cout << "Pus din defensiva .1" << endl;
			return 1;
		}
		else if(tablaPlina()) //Pune cea mai mare piesa disponibila
		{

			int pozitiePiesaMaxima = gasirePiesaPotrivita();

			if (pozitiePiesaMaxima == 5 || pozitiePiesaMaxima == 6)	mutare.DimensiunePiesa = 3;
			else if(pozitiePiesaMaxima == 3 || pozitiePiesaMaxima == 4)	mutare.DimensiunePiesa = 2;
			else if (pozitiePiesaMaxima == 1 || pozitiePiesaMaxima == 2)	mutare.DimensiunePiesa = 1;

			if (!tablaJoc[managerPiese[pozitiePiesaMaxima].x][managerPiese[pozitiePiesaMaxima].y].Stiva.empty()) tablaJoc[managerPiese[pozitiePiesaMaxima].x][managerPiese[pozitiePiesaMaxima].y].Stiva.pop();

			managerPiese[pozitiePiesaMaxima].x = c.x;
			managerPiese[pozitiePiesaMaxima].y = c.y;
			managerPiese[pozitiePiesaMaxima].peTabla = 1;
			mutare.Jucator = 2;

			tablaJoc[c.x][c.y].Stiva.push(mutare);
			inlocuire(i);
			graficMutareCalculator(i,c.x,c.y);
			cout << "Pus din defensiva .2  coords  " << c.x << " " << c.y << endl;
			return 1;


		}

	}
	return 0;
}
int ataca(Punct a, Punct b, Punct c)
{
	bool gasit = 0;
	int i;
	mutare.Jucator = 2;

	if (!tablaJoc[a.x][a.y].Stiva.empty() && !tablaJoc[b.x][b.y].Stiva.empty() && tablaJoc[a.x][a.y].Stiva.top().Jucator == 2 && tablaJoc[b.x][b.y].Stiva.top().Jucator == 2)
	{
		if (tablaJoc[c.x][c.y].Stiva.empty()) //In caz ca locul e gol ,computerul pune prima piesa disponibila
		{

			i = gasirePiesaPotrivita();

			managerPiese[i].x = c.x;
			managerPiese[i].y = c.y;
			managerPiese[i].peTabla = 1;

			if (i == 1 || i == 2) mutare.DimensiunePiesa = 1;
			else if (i == 3 || i == 4) mutare.DimensiunePiesa = 2;
			else if (i == 5 || i == 6) mutare.DimensiunePiesa = 3;

			tablaJoc[c.x][c.y].Stiva.push(mutare);
			inlocuire(i);
			graficMutareCalculator(i,c.x,c.y);
			cout << "atac .1" << endl;
			return 1;
		}
		else
		{
		    i = gasirePiesaPotrivita();
		    if (i == 1 || i == 2) mutare.DimensiunePiesa = 1;
			else if (i == 3 || i == 4) mutare.DimensiunePiesa = 2;
			else if (i == 5 || i == 6) mutare.DimensiunePiesa = 3;

			if(mutare.DimensiunePiesa > tablaJoc[c.x][c.y].Stiva.top().DimensiunePiesa)
            {
                managerPiese[i].x = c.x;
                managerPiese[i].y = c.y;
                managerPiese[i].peTabla = 1;
                mutare.Jucator = 2;
                tablaJoc[managerPiese[i].x][managerPiese[i].y].Stiva.pop();
                tablaJoc[c.x][c.y].Stiva.push(mutare);
                inlocuire(i);
                graficMutareCalculator(i,c.x,c.y);
                verificareSfarsitJoc();
                cout << "atac .2" << endl;
                return 1;
            }
		}

	}
	return 0;
}
int mutareComputer()
{
	a11.x = 1; a11.y = 1;
	a12.x = 1; a12.y = 2;
	a13.x = 1; a13.y = 3;
	a21.x = 2; a21.y = 1;
	a22.x = 2; a22.y = 2;
	a23.x = 2; a23.y = 3;
	a31.x = 3; a31.y = 1;
	a32.x = 3; a32.y = 2;
	a33.x = 3; a33.y = 3;

	// ATACA


	//Prima linie
	if (ataca(a11, a12, a13)) return 1;
	if (ataca(a11, a13, a12)) return 1;
	if (ataca(a12, a13, a11)) return 1;

	//A doua linie
	if (ataca(a21, a22, a23)) return 1;
	if (ataca(a21, a23, a22)) return 1;
	if (ataca(a22, a23, a21)) return 1;

	//A treia linie
	if (ataca(a31, a32, a33)) return 1;
	if (ataca(a31, a33, a32)) return 1;
	if (ataca(a32, a33, a31)) return 1;

	//Prima coloana
	if (ataca(a11, a21, a31)) return 1;
	if (ataca(a11, a31, a21)) return 1;
	if (ataca(a21, a31, a11)) return 1;

	//A doua coloana
	if (ataca(a12, a22, a32)) return 1;
	if (ataca(a12, a32, a22)) return 1;
	if (ataca(a22, a32, a12)) return 1;

	//A treia coloana
	if (ataca(a13, a23, a33)) return 1;
	if (ataca(a13, a33, a23)) return 1;
	if (ataca(a23, a33, a13)) return 1;

	//Diagonala principala
	if (ataca(a11, a22, a33)) return 1;
	if (ataca(a11, a33, a22)) return 1;
	if (ataca(a22, a33, a11)) return 1;

	//Diagonala secundara
	if (ataca(a13, a22, a31)) return 1;
	if (ataca(a22, a31, a13)) return 1;
	if (ataca(a13, a31, a22)) return 1;



	//Prima linie
	if (defensiva(a11, a12, a13)) return 1;
	if (defensiva(a11, a13, a12)) return 1;
	if (defensiva(a12, a13, a11)) return 1;

	//A doua linie
	if (defensiva(a21, a22, a23)) return 1;
	if (defensiva(a21, a23, a22)) return 1;
	if (defensiva(a22, a23, a21)) return 1;

	//A treia linie
	if (defensiva(a31, a32, a33)) return 1;
	if (defensiva(a31, a33, a32)) return 1;
	if (defensiva(a32, a33, a31)) return 1;

	//Prima coloana
	if (defensiva(a11, a21, a31)) return 1;
	if (defensiva(a11, a31, a21)) return 1;
	if (defensiva(a21, a31, a11)) return 1;

	//A doua coloana
	if (defensiva(a12, a22, a32)) return 1;
	if (defensiva(a12, a32, a22)) return 1;
	if (defensiva(a22, a32, a12)) return 1;

	//A treia coloana
	if (defensiva(a13, a23, a33)) return 1;
	if (defensiva(a13, a33, a23)) return 1;
	if (defensiva(a23, a33, a13)) return 1;

	//Diagonala principala
	if (defensiva(a11, a22, a33)) return 1;
	if (defensiva(a11, a33, a22)) return 1;
	if (defensiva(a22, a33, a11)) return 1;

	//Diagonala secundara
	if (defensiva(a13, a22, a31)) return 1;
	if (defensiva(a22, a31, a13)) return 1;
	if (defensiva(a13, a31, a22)) return 1;




	int contor = gasirePiesaPotrivita();
	mutare.Jucator = 2;

	if (contor == 1 || contor == 2) mutare.DimensiunePiesa = 1;
	else if (contor == 3 || contor == 4) mutare.DimensiunePiesa = 2;
	else if (contor == 5 || contor == 6) mutare.DimensiunePiesa = 3;



	if (tablaJoc[2][2].Stiva.empty())
	{
		tablaJoc[2][2].Stiva.push(mutare);

		managerPiese[contor].x = 2;
		managerPiese[contor].y = 2;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,2,2);
		return 1;

	}

	if (tablaJoc[1][1].Stiva.empty()) {

		tablaJoc[1][1].Stiva.push(mutare);


		managerPiese[contor].x = 1;
		managerPiese[contor].y = 1;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,1,1);
		return 1;

	}

	if (tablaJoc[1][3].Stiva.empty()) {

        tablaJoc[1][3].Stiva.push(mutare);

		managerPiese[contor].x = 1;
		managerPiese[contor].y = 3;
		managerPiese[contor].peTabla = 1;
		 inlocuire(contor);
        graficMutareCalculator(contor,1,3);
		return 1;
	}

	if (tablaJoc[3][1].Stiva.empty()) {

		tablaJoc[3][1].Stiva.push(mutare);

		managerPiese[contor].x = 3;
		managerPiese[contor].y = 1;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,3,1);
		return 1;
	}

	if (tablaJoc[3][3].Stiva.empty()) {
		tablaJoc[3][3].Stiva.push(mutare);

		managerPiese[contor].x = 3;
		managerPiese[contor].y = 3;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,3,3);
		return 1;
	}

	for (int i = 1; i <= 3; i++)
	{
		for (int j = 1; j <= 3; j++)
		{
			if (tablaJoc[i][j].Stiva.empty())
			{
				mutare.Jucator = 2;
				int c = gasirePiesaPotrivita();
				managerPiese[c].x = i;
				managerPiese[c].y = j;
				managerPiese[c].peTabla = 1;
				if (c == 1 || c == 2) mutare.DimensiunePiesa = 1;
				else if (c == 3 || c == 4) mutare.DimensiunePiesa = 2;
				else if (c == 5 || c == 6) mutare.DimensiunePiesa = 3;

				tablaJoc[i][j].Stiva.push(mutare);
				inlocuire(c);
                graficMutareCalculator(c,i,j);
				return 1;
			}
		}
	}






    if(tablaPlina())
    {
    contor = gasirePiesaPotrivita();
	mutare.Jucator = 2;

	if (contor == 1 || contor == 2) mutare.DimensiunePiesa = 1;
	else if (contor == 3 || contor == 4) mutare.DimensiunePiesa = 2;
	else if (contor == 5 || contor == 6) mutare.DimensiunePiesa = 3;



	if (tablaJoc[2][2].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa)
	{
		tablaJoc[2][2].Stiva.push(mutare);
		tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();
		managerPiese[contor].x = 2;
		managerPiese[contor].y = 2;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,2,2);
		return 1;

	}

	if (tablaJoc[1][1].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa) {

		tablaJoc[1][1].Stiva.push(mutare);
        tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();

		managerPiese[contor].x = 1;
		managerPiese[contor].y = 1;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,1,1);
		return 1;

	}

	if (tablaJoc[1][3].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa) {

        tablaJoc[1][3].Stiva.push(mutare);
        tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();
		managerPiese[contor].x = 1;
		managerPiese[contor].y = 3;
		managerPiese[contor].peTabla = 1;
		 inlocuire(contor);
        graficMutareCalculator(contor,1,3);
		return 1;
	}

	if (tablaJoc[3][1].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa) {

		tablaJoc[3][1].Stiva.push(mutare);
        tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();
		managerPiese[contor].x = 3;
		managerPiese[contor].y = 1;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,3,1);
		return 1;
	}

	if (tablaJoc[3][3].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa) {
		tablaJoc[3][3].Stiva.push(mutare);
        tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();
		managerPiese[contor].x = 3;
		managerPiese[contor].y = 3;
		managerPiese[contor].peTabla = 1;
		inlocuire(contor);
		graficMutareCalculator(contor,3,3);
		return 1;
	}

	for (int i = 1; i <= 3; i++)
	{
		for (int j = 1; j <= 3; j++)
		{
			if (tablaJoc[i][j].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa)
			{
				mutare.Jucator = 2;
				int c = gasirePiesaPotrivita();
				tablaJoc[managerPiese[contor].x][managerPiese[contor].y].Stiva.pop();
				managerPiese[c].x = i;
				managerPiese[c].y = j;
				managerPiese[c].peTabla = 1;
				if (c == 1 || c == 2) mutare.DimensiunePiesa = 1;
				else if (c == 3 || c == 4) mutare.DimensiunePiesa = 2;
				else if (c == 5 || c == 6) mutare.DimensiunePiesa = 3;

				tablaJoc[i][j].Stiva.push(mutare);
				inlocuire(c);
                graficMutareCalculator(c,i,j);
				return 1;
			}
		}
	}
    }

}
void evidentaMutariPlayer(int x , int y , int marimePiesa)
{
	if (marimePiesa == 1)
	{
		if (managerPiesePlayer[1].peTabla == 0)
		{
			managerPiesePlayer[1].peTabla = 1;
		}
		else if (managerPiesePlayer[2].peTabla == 0)
		{
			managerPiesePlayer[2].peTabla = 1;
		}
	}

	if (marimePiesa == 2)
	{
		if (managerPiesePlayer[3].peTabla == 0)
		{
			managerPiesePlayer[3].peTabla = 1;
		}
		else if (managerPiesePlayer[4].peTabla == 0)
		{
			managerPiesePlayer[4].peTabla = 1;
		}
	}

	if (marimePiesa == 3)
	{
		if (managerPiesePlayer[5].peTabla == 0)
		{
			managerPiesePlayer[5].peTabla = 1;
		}
		else if (managerPiesePlayer[6].peTabla == 0)
		{
			managerPiesePlayer[6].peTabla = 1;
		}
	}
}
void textcastigator()
{
    if(verificareSfarsitJoc()==1)
    {
        setcolor(WHITE);
        settextjustify(CENTER_TEXT,CENTER_TEXT);
        settextstyle(SANS_SERIF_FONT,HORIZ_DIR,5);
        outtextxy(latime*0.5,inaltime*0.07,"JUCATORUL 1 A CASTIGAT");
    }
    else
    {
        setcolor(WHITE);
        settextjustify(CENTER_TEXT,CENTER_TEXT);
        settextstyle(SANS_SERIF_FONT,HORIZ_DIR,5);
        outtextxy(latime*0.5,inaltime*0.07,"JUCATORUL 2 A CASTIGAT");
    }
}

void selecteazaPiesaTabla(int i, int j)
{

    if (!tablaJoc[i][j].Stiva.empty() && tablaJoc[i][j].Stiva.top().Jucator == randJucator)
    {
        mutare.DimensiunePiesa = tablaJoc[i][j].Stiva.top().DimensiunePiesa;
        mutare.Jucator = randJucator;
        tablaJoc[i][j].Stiva.pop();
    }
    cout << endl;
}


void golirestiva()
{
    int i,j;
    for(i=1;i<=3;i++)
        for(j=1;j<=3;j++)
            while(!tablaJoc[i][j].Stiva.empty())
                tablaJoc[i][j].Stiva.pop();
    for(i=0;i<=5;i++)
    {
        j1.pozitie[i]=0;
        j2.pozitie[i]=0;
    }
}
int mutareComputerAleatoriu()
{
	bool gasit = 0;
	int randomI, randomJ;
	mutare.Jucator = 2;
	while (!gasit)
	{
		randomI = rand() % 4;
		randomJ = rand() % 4;
		if (!randomI) randomI++;
		if (!randomJ) randomJ++;
		if (tablaJoc[randomI][randomJ].Stiva.empty())
		{
			mutare.Jucator = 2;
			int marime = gasirePiesaPotrivita();
			if (marime == 1 || marime == 2) mutare.DimensiunePiesa = 1;
			else if (marime == 3 || marime == 4) mutare.DimensiunePiesa = 2;
			else if (marime == 5 || marime == 6) mutare.DimensiunePiesa = 3;
			managerPiese[marime].peTabla = 1;
			tablaJoc[randomI][randomJ].Stiva.push(mutare);
			inlocuire(marime);
			graficMutareCalculator(marime,randomI,randomJ);
			gasit = 1;
			return 1;
		}
		else if (tablaPlina())
		{
			bool gata = 0;
			int rndI, rndJ;
			while (!gata)
			{
				rndI = rand() % 4;
				rndJ = rand() % 4;
				if (!rndI) rndI++;
				if (!rndJ) rndJ++;
				int marime = gasirePiesaPotrivita();
				if (marime == 1 || marime == 2) mutare.DimensiunePiesa = 1;
				else if (marime == 3 || marime == 4) mutare.DimensiunePiesa = 2;
				else if (marime == 5 || marime == 6) mutare.DimensiunePiesa = 3;

				if (tablaJoc[rndI][rndJ].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa && managerPiese[marime].disponibil)
				{
                        if(!tablaJoc[managerPiese[marime].x][managerPiese[marime].y].Stiva.empty()) tablaJoc[managerPiese[marime].x][managerPiese[marime].y].Stiva.pop();
                        managerPiese[marime].peTabla = 1;
                        tablaJoc[rndI][rndJ].Stiva.push(mutare);
                        inlocuire(marime);
                        graficMutareCalculator(marime,randomI,randomJ);
                        gata = 1;
                        return 1;
                    }
			}
		}
	}
	return 0;
}
void initpiesemanager()
{
    for(int i=1;i<=6;i++)
    {
        managerPiese[i].disponibil=1;
        managerPiese[i].peTabla=0;
    }
}
void afiseazaMatrice() {
	for (int i = 1; i < 4; i++) {
		for (int j = 1; j < 4; j++) {
			if (tablaJoc[i][j].Stiva.empty()) cout << 0 << " ";
			else cout << tablaJoc[i][j].Stiva.top().Jucator << " ";
		}
		cout << endl;
	}
}

void joaca(int gamemode)
{
    setbkcolor(BLACK);
    int ok,m,n,i,semafor=CONTINUA;
    j1.punctaj='0';
    j2.punctaj='0';
    do
    {
    setbkcolor(BLACK);
    initpiesemanager();
    start=time(&start);
    strcpy(v,"00:00");
    golirestiva();
    initlimite();
    endGame=false;
    randJucator = 1;
    creeazatabla();
    while (!endGame)
    {
        timer();
        textjucatori();
        m=-1;
        n=-1;
        option=INVALID;
        marimePiesa=-1;
        textalegetipiesa();
        cout<<randJucator<<endl<<"selectati optiune"<<endl;
        x=selecteazaoptiune();
        cout<<option<<endl;
        if (option == MARGINE)
        {
            cout<<"unde doriti sa mutati piesa?";
            do
            {
                timer();
                textmutare();
                x=cautare();
                if(x!=-1)
                    if(x==0)
                    {
                        textmutareinvalida();
                        delay(2000);
                    }
                    else
                    {
                        y=x%10;
                        x=x/10;
                    }
            }
            while(x==0);
            if(x==-1)
            {
                if(randJucator==1)
                {
                    option=INVALID;
                    selecteaza(j1.selectat);
                }
                else
                {
                    option=INVALID;
                    selecteaza(j2.selectat);
                }
            }
            cout<<x<<' '<<y<<endl;
            mutare.Jucator = randJucator;
            mutare.DimensiunePiesa = marimePiesa;
        }
        else
        if(option == TABLA)
        {
            y=x%10;
            x=x/10;
            cout<<x<<' '<<y<<endl;
            if (!tablaJoc[x][y].Stiva.empty() && tablaJoc[x][y].Stiva.top().Jucator == randJucator)
			{
				mutare.DimensiunePiesa = tablaJoc[x][y].Stiva.top().DimensiunePiesa;
				mutare.Jucator = randJucator;
				m=x;
				n=y;
            cout<<"unde doriti sa mutati piesa?";
			do
            {
                timer();
                textmutare();
                x=cautare();
                if(x!=-1)
                    if(x==0)
                    {
                    textmutareinvalida();
                    delay(2000);
                    }
                    else
                    {
                    y=x%10;
                    x=x/10;
                    }
            }
            while(x==0);
            if(x==-1)
            {
                if(randJucator==1)
                {
                    option=INVALID;
                    selecteaza(j1.selectat);
                }
                else
                {
                    option=INVALID;
                    selecteaza(j2.selectat);
                }
            }
            if(option!=INVALID)
                {
                tablaJoc[m][n].Stiva.pop();
                if(gamemode == CALCULATOR_STRATEGIE)
                    evidentaMutariPlayer(x, y, mutare.DimensiunePiesa);
                }
            cout<<x<<' '<<y<<endl;
			}
            else
                option=INVALID;

        }
        if(option==INVALID)
            cout<<"optiune invalida"<<endl;
        if(option!=INVALID)
        {
        ok=0;
        do
        {
            timer();
            if (tablaJoc[x][y].Stiva.empty())
            {
                tablaJoc[x][y].Stiva.push(mutare);
                ok=1;
            }
            else if (tablaJoc[x][y].Stiva.size() < 3 && tablaJoc[x][y].Stiva.top().DimensiunePiesa < mutare.DimensiunePiesa)
            {
                tablaJoc[x][y].Stiva.push(mutare);
                ok=1;
            }
            else
            {
                x=cautare();
                y=x%10;
                x=x/10;
            }
        }
        while(ok==0);
        if(gamemode == CALCULATOR_STRATEGIE)
        {
            if (mutare.DimensiunePiesa == 1)
			{
				if (managerPiese[1].x == x && managerPiese[1].y == y) managerPiese[1].disponibil = 0;
				if (managerPiese[2].x == x && managerPiese[2].y == y) managerPiese[2].disponibil = 0;
			}

			if (mutare.DimensiunePiesa == 2)
			{
				if (managerPiese[3].x == x && managerPiese[3].y == y) managerPiese[3].disponibil = 0;
				if (managerPiese[4].x == x && managerPiese[4].y == y) managerPiese[4].disponibil = 0;
			}

			if (mutare.DimensiunePiesa == 3)
			{
				if (managerPiese[5].x == x && managerPiese[5].y == y) managerPiese[5].disponibil = 0;
				if (managerPiese[5].x == x && managerPiese[6].y == y) managerPiese[6].disponibil = 0;
			}
        }
        mutapiesamargine();
        if (verificareSfarsitJoc() == 1)
        {
            endGame = true;
            j1.punctaj++;
            textcastigator();
            delay(5000);
        }
        else if (verificareSfarsitJoc() == 2)
        {
            j2.punctaj++;
            endGame = true;
            textcastigator();
            delay(5000);
        }
        if(gamemode == MULTIPLAYER)
        {
        if (randJucator == 1)
            randJucator = 2;
        else if(randJucator == 2)
            randJucator = 1;
        }
        else
            if(gamemode == CALCULATOR_STRATEGIE && endGame == false)
            {
                mutareComputer();
                creeazapiese();
                if (verificareSfarsitJoc() == 1)
                {
                    endGame = true;
                    j1.punctaj++;
                    textcastigator();
                    delay(5000);
                }
        else if (verificareSfarsitJoc() == 2)
            {
                    j2.punctaj++;
                    endGame = true;
                    textcastigator();
                    delay(5000);
            }

            }
            else
                if(gamemode == CALCULATOR_ALEATORIU && endGame == false)
                {
                    mutareComputerAleatoriu();
                    creeazapiese();
                if (verificareSfarsitJoc() == 1)
                {
                    endGame = true;
                    j1.punctaj++;
                    textcastigator();
                    delay(5000);
                }
            else if (verificareSfarsitJoc() == 2)
            {
                    j2.punctaj++;
                    endGame = true;
                    textcastigator();
                    delay(5000);
                }
                }
        }
    afiseazaMatrice();
    }
    clearmouseclick(WM_LBUTTONUP);
    clearmouseclick(WM_LBUTTONDOWN);
    int z=latime/2,w,semafor2=CONTINUA;
    setcolor(MAGENTA);
    rectangle(latime/7,inaltime/4,latime-latime/7,inaltime-inaltime/4);
    setfillstyle(SOLID_FILL,MAGENTA);
    floodfill(latime/2,inaltime/2,MAGENTA);
    do
    {
        clearmouseclick(WM_LBUTTONUP);
        clearmouseclick(WM_LBUTTONDOWN);
        w=inaltime/2.8;
        if(mousex()>z-latime/4 && mousex()<z+latime/4 && mousey()>w-inaltime/20 && mousey()<w+inaltime/20)
        {
            buton(z,w,"UN NOU JOC?",APASAT);
            if(ismouseclick(WM_LBUTTONUP))
            {
                clearmouseclick(WM_LBUTTONUP);
                clearmouseclick(WM_LBUTTONDOWN);
                semafor2=OPRESTE;
            }
        }
        else
            buton(z,w,"UN N OU JOC?",RELAXAT);
        w=inaltime/1.6;
        if(mousex()>z-latime/4 && mousex()<z+latime/4 && mousey()>w-inaltime/20 && mousey()<w+inaltime/20)
            {
            buton(z,w,"M E N I U",APASAT);
            if(ismouseclick(WM_LBUTTONUP))
            {
                clearmouseclick(WM_LBUTTONUP);
                clearmouseclick(WM_LBUTTONDOWN);
                semafor2=OPRESTE;
                semafor=OPRESTE;
            }
        }
        else
            buton(z,w,"M E  N I U",RELAXAT);
    }
    while(semafor2);
    clearmouseclick(WM_LBUTTONDOWN);
    }
    while(semafor);
}
void sound(int i)
{
    if(i==1)
        PlaySound(TEXT("audio1.wav"),NULL,SND_ASYNC | SND_LOOP);
}

void titlu()
{
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,6);
    outtextxy(getmaxx()/2,getmaxy()/8,"GOBBLET GOBBLERS");
}
void OPTIUNI()
{
    int i,x,y,ok=1,r;
    clearmouseclick(WM_LBUTTONDOWN);
    setbkcolor(BLACK);
    cleardevice();
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,6);
    outtextxy(latime/2,inaltime/8,"OPTIUNI");
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,2);
    outtextxy(latime/2,inaltime/4,"MUZICA");
    outtextxy(latime*0.07,inaltime/2,"JUCATOR 1:");
    outtextxy(latime*0.07,inaltime/1.3,"JUCATOR 2:");
    rectangle(728,172,757,190);
    do
    {
        latime=latime/3;
    if(mousex()>50 && mousex()<300 && mousey()>50 && mousey()<150)
        {
        buton(175,100,"APLICA",APASAT);
        }
    else
        {
        buton(175,100,"APLICA",RELAXAT);
        }
        latime=getmaxx();
    for(i=1;i<=4;i++)
        if(J1!=i)
            piesa(latime*0.2*i,inaltime/2,MARE,i,NESELECTAT);
        else
            piesa(latime*0.2*i,inaltime/2,MARE,i,SELECTAT);
    for(i=1;i<=4;i++)
        if(J2!=i)
            piesa(latime*0.2*i,inaltime/1.3,MARE,i,NESELECTAT);
        else
            piesa(latime*0.2*i,inaltime/1.3,MARE,i,SELECTAT);
    if(ismouseclick(WM_LBUTTONDOWN))
    {
        x=mousex();
        y=mousey();
        clearmouseclick(WM_LBUTTONUP);
        clearmouseclick(WM_LBUTTONDOWN);
        if(x>728 && x<757 && y>172 && y<190)
            if(music==1)
            {
                PlaySound(TEXT(NULL),NULL,SND_ASYNC | SND_LOOP);
                setfillstyle(SOLID_FILL,YELLOW);
                floodfill(729,173,WHITE);
                music=OFF;
            }
            else
            {
                sound(1);
                setfillstyle(SOLID_FILL,BLACK);
                floodfill(729,173,WHITE);
                music=ON;
            }
        for(i=1;i<=4;i++)
        {
            if(x>latime*0.2*i-inaltime*MARE && x<latime*0.2*i+inaltime*MARE && y>inaltime/2-inaltime*MARE && y<inaltime/2+inaltime*MARE)
                J1=i;
            if(x>latime*0.2*i-inaltime*MARE && x<latime*0.2*i+inaltime*MARE && y>inaltime/1.3-inaltime*MARE && y<inaltime/1.3+inaltime*MARE)
                J2=i;
        }
        if(x>50 && x<300 && y>50 && y<150)
            ok=0;
    }
    }
    while(ok);
}
int incepejoc()
{
    setbkcolor(RED);
    cleardevice();
    int x,y,j=CONTINUA;
    setcolor(WHITE);
    settextjustify(CENTER_TEXT,CENTER_TEXT);
    settextstyle(SANS_SERIF_FONT,HORIZ_DIR,6);
    outtextxy(getmaxx()/2,getmaxy()/8,"ALEGETI OPTIUNE JOC");
    do
    {
        x=latime/2;
        y=inaltime/3;
        if(mousex()>x-latime/4 && mousey()>y-inaltime/20 && mousex()<x+latime/4 && mousey()<y+inaltime/20)
        {
            buton(x,y,"2 JUC ATORI",APASAT);
            if(ismouseclick((WM_LBUTTONUP)))
            {
                clearmouseclick(WM_LBUTTONUP);
                joaca(MULTIPLAYER);
                return 0;
            }
        }
        else
            buton(x,y,"2 JUC ATORI",RELAXAT);
        y=inaltime/2.1;
        if(mousex()>x-latime/4 && mousey()>y-inaltime/20 && mousex()<x+latime/4 && mousey()<y+inaltime/20)
        {
            buton(x,y,"CALCULATOR USOR",APASAT);
            if(ismouseclick((WM_LBUTTONUP)))
            {
                clearmouseclick(WM_LBUTTONUP);
                joaca(CALCULATOR_ALEATORIU);
                return 0;
            }
        }
        else
            buton(x,y,"CALCULATOR USOR",RELAXAT);
        y=inaltime/1.6;
        if(mousex()>x-latime/4 && mousey()>y-inaltime/20 && mousex()<x+latime/4 && mousey()<y+inaltime/20)
        {
            buton(x,y,"CALCULATOR GREU",APASAT);
            if(ismouseclick((WM_LBUTTONUP)))
            {
                clearmouseclick(WM_LBUTTONUP);
                joaca(CALCULATOR_STRATEGIE);
                return 0;
            }
        }
        else
            buton(x,y,"CALCULATOR GREU",RELAXAT);
        y=inaltime/1.3;
        if(mousex()>x-latime/4 && mousey()>y-inaltime/20 && mousex()<x+latime/4 && mousey()<y+inaltime/20)
        {
            buton(x,y,"INAPOI",APASAT);
            if(ismouseclick((WM_LBUTTONUP)))
            {
                j=OPRESTE;
            }
        }
        else
            buton(x,y,"INAPOI",RELAXAT);
    }
    while(j);
    return 0;
}
int meniu()
{
    int x,y,j=CONTINUA;
    setbkcolor(RED);
    cleardevice();
    titlu();
    do
    {
    x=latime/2;
    y=inaltime/3;
    if(mousex()>x-latime/4 && mousex()<x+latime/4 && mousey()>y-inaltime/20 && mousey()<y+inaltime/20)
    {
        if(ismouseclick(WM_LBUTTONDOWN))
            sound(2),clearmouseclick(WM_LBUTTONDOWN);
        buton(x,y,"     INCEPE JOC     ",APASAT);
        if(ismouseclick(WM_LBUTTONUP))
        {
            clearmouseclick(WM_LBUTTONUP);
            incepejoc();
            return meniu();
        }
    }
    else
        buton(x,y,"I N C E P E    J O C",RELAXAT);
    y=inaltime/2;
    if(mousex()>x-latime/4 && mousex()<x+latime/4 && mousey()>y-inaltime/20 && mousey()<y+inaltime/20)
    {
        buton(x,y,"    OPTIUNI    ",APASAT);
         if(ismouseclick(WM_LBUTTONUP))
         {
             clearmouseclick(WM_LBUTTONUP);
             OPTIUNI();
             return meniu();
         }
    }
    else
        buton(x,y,"O P T I U N I",RELAXAT);
    y=inaltime*4/6;
    if(mousex()>x-latime/4 && mousex()<x+latime/4 && mousey()>y-inaltime/20 && mousey()<y+inaltime/20)
    {
        buton(x,y,"     IESIRE JOC     ",APASAT);
        if(ismouseclick(WM_LBUTTONUP))
            j=OPRESTE;
    }
    else
        buton(x,y,"I E S I R E   J O C",RELAXAT);
    clearmouseclick(WM_LBUTTONUP);
    clearmouseclick(WM_LBUTTONDOWN);
   delay(100);
    }
    while(j);
    return 0;
}
int main()
{
    initwindow(1366,764);
    latime=getmaxx();
    inaltime=getmaxy();
    sound(1);
    meniu();
    closegraph();
}
